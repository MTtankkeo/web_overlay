!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).Overlay={})}(this,(function(e){"use strict";const t={AUTO:"auto",AUTO_LEFT:"auto_left",AUTO_RIGHT:"auto_right",AUTO_CENTER:"auto_center"};class o{static attach(e,o,n=document.body,i=t.AUTO){if(null==e)throw new Error("todo");if(null==o)throw new Error("todo");if(null==n)throw new Error("todo");const s=document.createElement("overlay-wrapper");return s.append(e),this.overlays.set(e,s),n.append(s),s}static detach(e){console.log(this.overlays.get(e))}}o.overlays=new Map;class n{static get tolerance(){return.3}measureSize(e){const t=e.getBoundingClientRect(),o=e.clientWidth/t.width,i=e.clientHeight/t.height,s=n.tolerance;return{x:t.x,y:t.y,size:{width:t.width*o+s,height:t.height*i+s}}}reflow(e){e.getBoundingClientRect()}}class i extends n{performLayout(e,t,o){const n=this.measureSize(e),i=this.measureSize(o);this.measureSize(t);const s={x:Math.max(n.size.width-i.size.width,0),y:Math.max(n.size.height-i.size.height,0)};return{x:s.x,y:s.y,size:n.size}}}class s extends HTMLElement{constructor(){super(...arguments),this.render=new i}connectedCallback(){this.style.display="block",this.style.width="fit-content",this.style.height="fit-content";const e=this.render.performLayout(this,document.body,document.body);console.log(e)}}customElements.define("overlay-wrapper",s),e.Overlay=o,e.OverlayAlignment=t,e.OverlayElement=s,e.OverlayRender=n}));
//# sourceMappingURL=index.umd.js.map
