class t{constructor(t,e){this.viewport=t,this.alignment=e}}class e extends t{getSized(t){throw new Error("Method not implemented.")}getOverflowed(t){const e=this.viewport,i=window.innerWidth-(t.x+t.width),n=window.innerWidth-this.viewport.right;return console.log(e.top-t.y),{left:Math.max(e.left-t.x,0),right:Math.max(n-i,0),top:Math.max(e.top-t.y,0),bottom:Math.max(t.y+t.height-e.bottom,0)}}}class i{reflow(t,e){var i,n,o,s;return new DOMRect(null!==(i=e.x)&&void 0!==i?i:t.x,null!==(n=e.y)&&void 0!==n?n:t.y,null!==(o=e.width)&&void 0!==o?o:t.width,null!==(s=e.height)&&void 0!==s?s:t.height)}}class n extends i{createOverlayConstraint(t,i){return new e(t,i)}}const o=new class extends n{performLayout(t){var e,i;const n=t.target.getBoundingClientRect(),o=t.parent.getBoundingClientRect(),r=t.behavior.alignment;null!==(e=null==r?void 0:r.x)&&void 0!==e||s.ALL,null!==(i=null==r?void 0:r.y)&&void 0!==i||s.ALL;let h=t.getBoundingClientRect();const a=n.x+(n.width-h.width)/2,l=n.y-h.height;h=this.reflow(h,{x:a,y:l});const d=this.createOverlayConstraint(o,s.ALL).getOverflowed(h);console.log(d);const c=a+d.left,w=l-d.bottom;return{x:Math.max(c,0),y:Math.max(w,0),size:{width:Math.min(h.width,o.width),height:Math.min(h.height,h.bottom+w)}}}};var s;!function(t){t.NONE="none",t.ALL="all",t.SIZE="size",t.POSITION="position"}(s||(s={}));class r{static attach(t,e,i=document.body,n={render:o}){if(null==t)throw new Error("todo");if(null==e)throw new Error("todo");if(null==i)throw new Error("todo");const s=document.createElement("overlay-wrapper");return s.append(t),s.target=e,s.parent=i,s.behavior=n,this.overlays.set(t,s),i.append(s),s}static detach(t){console.log(this.overlays.get(t))}}r.overlays=new Map;class h extends HTMLElement{markNeedRepaint(){this.unsetLayout(),this.performLayout()}unsetLayout(){this.style.width="max-content",this.style.height="max-content",this.style.left="0px",this.style.top="0px",this.getBoundingClientRect()}disconnectedCallback(){this.observer.disconnect(),window.removeEventListener("resize",this.markNeedRepaint.bind(this)),window.removeEventListener("scroll",this.markNeedRepaint.bind(this))}connectedCallback(){this.style.display="block",this.style.position="fixed",this.style.left="0px",this.style.top="0px",this.style.width="max-content",this.style.height="max-content",this.performLayout(),this.observer=new MutationObserver(this.markNeedRepaint.bind(this)),this.observer.observe(this.firstElementChild,{attributes:!0,characterData:!0,subtree:!0,childList:!0}),window.addEventListener("resize",this.markNeedRepaint.bind(this)),window.addEventListener("scroll",this.markNeedRepaint.bind(this))}performLayout(){const t=this.behavior.render.performLayout(this);this.style.width=`${t.size.width}px`,this.style.height=`${t.size.height}px`,this.style.left=`${t.x}px`,this.style.top=`${t.y}px`}}customElements.define("overlay-wrapper",h);export{r as Overlay,s as OverlayAlignment,h as OverlayElement,i as OverlayRender};
//# sourceMappingURL=index.esm.js.map
