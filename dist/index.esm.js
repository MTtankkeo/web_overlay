class t{constructor(t,e){this.viewport=t,this.alignment=e}measure(t){return{size:this.measureSized(t),overflowed:this.measureOverflowed(t)}}}class e extends t{measureSized(t){throw new Error("Method not implemented.")}measureOverflowed(t){const e=this.viewport,i=window.innerWidth-(t.x+t.width),s=window.innerWidth-this.viewport.right;return{left:Math.max(e.left-t.x,0),right:Math.max(s-i,0),top:0,bottom:Math.max(t.y+t.height-e.bottom,0)}}}class i{reflow(t,e){var i,s,o,n;return new DOMRect(null!==(i=e.x)&&void 0!==i?i:t.x,null!==(s=e.y)&&void 0!==s?s:t.y,null!==(o=e.width)&&void 0!==o?o:t.width,null!==(n=e.height)&&void 0!==n?n:t.height)}}class s extends i{createOverlayConstraint(t,i){return new e(t,i)}}const o=new class extends s{performLayout(t){var e,i;const s=t.target.getBoundingClientRect(),o=t.parent.getBoundingClientRect(),r=t.behavior.alignment;null!==(e=null==r?void 0:r.x)&&void 0!==e||n.ALL,null!==(i=null==r?void 0:r.y)&&void 0!==i||n.ALL;let h=t.getBoundingClientRect();const l=s.x+(s.width-h.width)/2,a=s.y+s.height;h=this.reflow(h,{x:l,y:a});const d=this.createOverlayConstraint(o,n.ALL).measureOverflowed(h);console.log(d);const c=l+d.left,u=a-d.bottom;return{x:Math.max(c,0),y:Math.max(u,0),size:{width:Math.min(h.width,o.width),height:Math.min(h.height,h.bottom+u)}}}};var n;!function(t){t.NONE="none",t.ALL="all",t.SIZE="size",t.POSITION="position"}(n||(n={}));class r{static attach(t,e,i=document.body,s={render:o}){if(null==t)throw new Error("todo");if(null==e)throw new Error("todo");if(null==i)throw new Error("todo");const n=document.createElement("overlay-wrapper");return n.append(t),n.target=e,n.parent=i,n.behavior=s,this.overlays.set(t,n),i.append(n),n}static detach(t){console.log(this.overlays.get(t))}}r.overlays=new Map;class h extends HTMLElement{unsetLayout(){this.style.width="max-content",this.style.height="max-content",this.style.left="0px",this.style.top="0px",this.getBoundingClientRect()}disconnectedCallback(){this.observer.disconnect()}connectedCallback(){this.style.display="block",this.style.position="fixed",this.style.left="0px",this.style.top="0px",this.style.width="max-content",this.style.height="max-content",this.performLayout(),this.observer=new MutationObserver((()=>{this.unsetLayout(),this.performLayout()})),this.observer.observe(this.firstElementChild,{attributes:!0,characterData:!0,subtree:!0,childList:!0}),window.addEventListener("resize",(()=>{this.unsetLayout(),this.performLayout()}))}performLayout(){const t=this.behavior.render.performLayout(this);this.style.width=`${t.size.width}px`,this.style.height=`${t.size.height}px`,this.style.left=`${t.x}px`,this.style.top=`${t.y}px`}}customElements.define("overlay-wrapper",h);export{r as Overlay,n as OverlayAlignment,h as OverlayElement,i as OverlayRender};
//# sourceMappingURL=index.esm.js.map
